select(date,value,percentage_change,log_gov) %>%
rename(Date = date)
plot7<- ggplot(data = gov_spending_australia, aes(x = Date, y =log_gov)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot8<- ggplot(data = gov_spending_australia, aes(x = Date, y =percentage_change)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending percentage change", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
gov_plot <- plot_grid(plot7, plot8,  ncol = 1, align = "v")
print(gov_plot)
adf.test(gov_spending_australia$log_gov)
test1 = acf(gov_spending_australia$log_gov)
test2 = pacf(gov_spending_australia$log_gov)
## Preliminary test
# Assuming your dataset is called 'data'
data_without_date <- df[,-1] # Remove date column if it exists
# Perform the ADF test on each variable and extract the test statistic and p-value
adf_summary <- map_df(data_without_date, function(x) {
adf_test <- ur.df(x, type = "none", lags = 1)
adf_test_summary <- summary(adf_test)
tibble(
Test_statistic = adf_test_summary@teststat[1, 1],
Critical_value= adf_test_summary@cval[1, 1]
)
}, .id = "Variable")
# Add variable names to the summary table
adf_summary$Variable <- colnames(data_without_date)
# Display the ADF test summary table
adf_summary
# Define the number of rows and columns for the combined plot
nrow <- 3
ncol <- 3
# Set up the combined plot grid
par(mfrow = c(nrow, ncol))
# Run the ACF and PACF functions for each variable and display the plots
for (i in seq_along(data_without_date)) {
variable_name <- colnames(data_without_date)[i]
# ACF plot
acf(data_without_date[[i]], main = paste("ACF of", variable_name))
}
# Reset the graphical parameters to default
par(mfrow = c(nrow, ncol))
# PACF plot
for (i in seq_along(data_without_date)) {
variable_name <- colnames(data_without_date)[i]
# PACF plot
pacf(data_without_date[[i]], main = paste("PACF of", variable_name))
}
View(df)
M3.zoo <- zoo(M3$M3, M3$Date)
to_quarter <- function(x) {
quarter_end <- as.Date(as.yearqtr(format(x, "%Y-%m-%d"), format = "%Y-%m"), frac = 1)
quarter_end + (as.numeric(format(quarter_end, "%m")) == 12) * (365 - 365/4) - (365/4)
}
# Aggregate the monthly data to quarterly
M3_quarterly <- aggregate(M3.zoo, to_quarter, mean)
# Convert the aggregated quarterly data back to a data frame
M3_quarterly_df <- data.frame(Date = as.Date(index(M3_quarterly)), M3 = coredata(M3_quarterly))
M3 <- read_rba("D3")
# Filter, rename, and select columns
M3 <- M3 %>%
filter(series_id == "DMAM3N") %>%
rename(Date = date, M3 = value) %>%
select(Date, M3)
# Create a zoo object
M3.zoo <- zoo(M3$M3, M3$Date)
# Function to convert the index to quarterly and set the last day of each quarter
to_quarter <- function(x) {
quarter_end <- as.Date(as.yearqtr(format(x, "%Y-%m-%d"), format = "%Y-%m"), frac = 1)
quarter_end + (as.numeric(format(quarter_end, "%m")) == 12) * (365 - 365/4) - (365/4)
}
# Aggregate the monthly data to quarterly
M3_quarterly <- aggregate(M3.zoo, to_quarter, mean)
# Convert the aggregated quarterly data back to a data frame
M3_quarterly_df <- data.frame(Date = as.Date(index(M3_quarterly)), M3 = coredata(M3_quarterly))
library(readrba)
library(readrba)
library(tseries)
library(ggplot2)
library(cowplot)
library(dplyr)
library(zoo)
library(tidyverse)
library(fredr)
library(urca)
library(xts)
consumption <- read_rba('H2')
consumption$Date <- as.Date(consumption$date, format = "%Y-%m-%d")
# Household final consumption expenditure measured in $million
consumption2 <- consumption %>%
filter(series_id == "GGDPECCVPSH") %>%
rename(consumption = value)
df <- consumption2 %>% select(Date,consumption)
# Consumption growth
consumption3 <- consumption %>%
filter(series_id == "GGDPECCVPSHY") %>%
rename(consumption_growth = value) %>% select(Date,consumption_growth)
df <- merge(df,consumption3,by="Date")
df$log_con = log(df$consumption)
# Plot the data
plot1<- ggplot(data = df, aes(x = Date, y =log_con)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Household Consumption (log)", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot2<- ggplot(data = df, aes(x = Date, y =consumption_growth)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Household Consumption Growth", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
consumption_plot <- plot_grid(plot1, plot2,  ncol = 1, align = "v")
print(consumption_plot)
# GDP
GDP <- read_rba('H1')
GDP$Date <- as.Date(GDP$date, format = "%Y-%m-%d")
# Real GDP
GDP2 <- GDP %>%
filter(series_id == "GGDPCVGDP") %>%
rename(GDP = value) %>%
select(Date,GDP)
df <- merge(df,GDP2, by="Date")
df$log_gdp = log(df$GDP)
# First difference for gdp
df <- df %>% mutate(GDP_percentage = (GDP-lag(GDP))/lag(GDP)*100)
plot2<- ggplot(data = df, aes(x = Date, y =log_gdp)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " GDP (log)", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot3<- ggplot(data = df, aes(x = Date, y =GDP_percentage)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " GDP percentage change", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
consumption_plot <- plot_grid(plot2, plot3,  ncol = 1, align = "v")
print(consumption_plot)
# TWI
real_exchange_rate <- read_rba("F15")
real_exchange_rate$Date <- as.Date(real_exchange_rate$date, format = "%Y-%m-%d")
real_exchange_rate_twi <-   real_exchange_rate %>%
filter(series_id == "FRERTWI") %>%
rename(TWI = value) %>%
select(Date,TWI)
df <- merge(df,real_exchange_rate_twi, by='Date')
plot5<- ggplot(data = df, aes(x = Date, y =TWI)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Real exchange rate (TWI)", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
print(plot5)
Trade_balance <- read_rba("I1")
Trade_balance$Date <- as.Date(Trade_balance$date, format = "%Y-%m-%d")
Trade_balance2 <- Trade_balance   %>%
filter(series_id == "HTBGSCPGDP") %>%
rename(Trade_balance = value) %>%
select(Date,Trade_balance)
df <- merge(df,Trade_balance2,by = "Date")
plot6<- ggplot(data = df, aes(x = Date, y =Trade_balance)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Trade Balance", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
print(plot6)
CPI = read_rba("G1")
inflation <- CPI %>%
filter(series_id == "GCPIAGQP") %>%
rename(Date = date, Quarterly_inflation = value) %>%
select(Date, Quarterly_inflation)
df <- merge(df,inflation,by = "Date")
M3 <- read_rba("D3")
# Filter, rename, and select columns
M3 <- M3 %>%
filter(series_id == "DMAM3N") %>%
rename(Date = date, M3 = value) %>%
select(Date, M3)
# Create a zoo object
M3.zoo <- zoo(M3$M3, M3$Date)
# Function to convert the index to quarterly and set the last day of each quarter
to_quarter <- function(x) {
quarter_end <- as.Date(as.yearqtr(format(x, "%Y-%m-%d"), format = "%Y-%m"), frac = 1)
quarter_end + (as.numeric(format(quarter_end, "%m")) == 12) * (365 - 365/4) - (365/4)
}
# Aggregate the monthly data to quarterly
M3_quarterly <- aggregate(M3.zoo, to_quarter, mean)
# Convert the aggregated quarterly data back to a data frame
M3_quarterly_df <- data.frame(Date = as.Date(index(M3_quarterly)), M3 = coredata(M3_quarterly))
# Set your FRED API key
readRenviron("secret.R")
api_key <-Sys.getenv("MY_FRED_API_KEY")
fredr_set_key(api_key)
# Download the Australian government spending data (quarterly data, seasonally adjusted)
gov_spending_australia <- fredr(series_id = "AUSGFCEQDSMEI",observation_start = as.Date("1970-01-01"))
#  Real General Government Final Consumption Expenditure for Australia
gov_spending_australia <- fredr(series_id = "NCGGRSAXDCAUQ",observation_start = as.Date("1970-01-01"))
gov_spending_australia$log_gov = log(gov_spending_australia$value)
gov_spending_australia <- gov_spending_australia %>%
mutate(percentage_change = (value - lag(value)) / lag(value) * 100) %>%
select(date,value,percentage_change,log_gov) %>%
rename(Date = date)
plot7<- ggplot(data = gov_spending_australia, aes(x = Date, y =log_gov)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot8<- ggplot(data = gov_spending_australia, aes(x = Date, y =percentage_change)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending percentage change", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
gov_plot <- plot_grid(plot7, plot8,  ncol = 1, align = "v")
print(gov_plot)
adf.test(gov_spending_australia$log_gov)
test1 = acf(gov_spending_australia$log_gov)
test2 = pacf(gov_spending_australia$log_gov)
## Preliminary test
# Assuming your dataset is called 'data'
data_without_date <- df[,-1] # Remove date column if it exists
# Perform the ADF test on each variable and extract the test statistic and p-value
adf_summary <- map_df(data_without_date, function(x) {
adf_test <- ur.df(x, type = "none", lags = 1)
adf_test_summary <- summary(adf_test)
tibble(
Test_statistic = adf_test_summary@teststat[1, 1],
Critical_value= adf_test_summary@cval[1, 1]
)
}, .id = "Variable")
# Add variable names to the summary table
adf_summary$Variable <- colnames(data_without_date)
# Display the ADF test summary table
adf_summary
# Define the number of rows and columns for the combined plot
nrow <- 3
ncol <- 3
# Set up the combined plot grid
par(mfrow = c(nrow, ncol))
# Run the ACF and PACF functions for each variable and display the plots
for (i in seq_along(data_without_date)) {
variable_name <- colnames(data_without_date)[i]
# ACF plot
acf(data_without_date[[i]], main = paste("ACF of", variable_name))
}
# Reset the graphical parameters to default
par(mfrow = c(nrow, ncol))
# PACF plot
for (i in seq_along(data_without_date)) {
variable_name <- colnames(data_without_date)[i]
# PACF plot
pacf(data_without_date[[i]], main = paste("PACF of", variable_name))
}
M3.zoo <- zoo(M3$M3, M3$Date)
```{r}
M3 <- read_rba("D3")
# Filter, rename, and select columns
M3 <- M3 %>%
filter(series_id == "DMAM3N") %>%
rename(Date = date, M3 = value) %>%
select(Date, M3)
# Create a zoo object
M3.zoo <- zoo(M3$M3, M3$Date)
# Function to convert the index to quarterly and set the last day of each quarter
to_quarter <- function(x) {
as.yearqtr(format(x, "%Y-%m-%d"), format = "%Y-%m")
}
# Aggregate the monthly data to quarterly
M3_quarterly <- aggregate(M3.zoo, to_quarter, mean)
# Function to convert the yearqtr object to the last day of each quarter
yearqtr_to_quarter_end <- function(x) {
as.Date(as.yearqtr(x) + 1/4 - 1, frac = 1)
}
# Convert the aggregated quarterly data back to a data frame
M3_quarterly_df <- data.frame(Date = yearqtr_to_quarter_end(index(M3_quarterly)), M3 = coredata(M3_quarterly))
View(M3_quarterly_df)
df = merge(df,M3_quarterly_df, by= "Date")
View(df)
library(readrba)
library(readrba)
library(tseries)
library(ggplot2)
library(cowplot)
library(dplyr)
library(zoo)
library(tidyverse)
library(fredr)
library(urca)
library(xts)
consumption <- read_rba('H2')
consumption$Date <- as.Date(consumption$date, format = "%Y-%m-%d")
# Household final consumption expenditure measured in $million
consumption2 <- consumption %>%
filter(series_id == "GGDPECCVPSH") %>%
rename(consumption = value)
df <- consumption2 %>% select(Date,consumption)
# Consumption growth
consumption3 <- consumption %>%
filter(series_id == "GGDPECCVPSHY") %>%
rename(consumption_growth = value) %>% select(Date,consumption_growth)
df <- merge(df,consumption3,by="Date")
df$log_con = log(df$consumption)
# Plot the data
plot1<- ggplot(data = df, aes(x = Date, y =log_con)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Household Consumption (log)", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot2<- ggplot(data = df, aes(x = Date, y =consumption_growth)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Household Consumption Growth", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
consumption_plot <- plot_grid(plot1, plot2,  ncol = 1, align = "v")
print(consumption_plot)
View(df)
# GDP
GDP <- read_rba('H1')
GDP$Date <- as.Date(GDP$date, format = "%Y-%m-%d")
# Real GDP
GDP2 <- GDP %>%
filter(series_id == "GGDPCVGDP") %>%
rename(GDP = value) %>%
select(Date,GDP)
df <- merge(df,GDP2, by="Date")
df$log_gdp = log(df$GDP)
# First difference for gdp
df <- df %>% mutate(GDP_percentage = (GDP-lag(GDP))/lag(GDP)*100)
plot2<- ggplot(data = df, aes(x = Date, y =log_gdp)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " GDP (log)", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot3<- ggplot(data = df, aes(x = Date, y =GDP_percentage)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " GDP percentage change", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
consumption_plot <- plot_grid(plot2, plot3,  ncol = 1, align = "v")
print(consumption_plot)
# TWI
real_exchange_rate <- read_rba("F15")
real_exchange_rate$Date <- as.Date(real_exchange_rate$date, format = "%Y-%m-%d")
real_exchange_rate_twi <-   real_exchange_rate %>%
filter(series_id == "FRERTWI") %>%
rename(TWI = value) %>%
select(Date,TWI)
df <- merge(df,real_exchange_rate_twi, by='Date')
plot5<- ggplot(data = df, aes(x = Date, y =TWI)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Real exchange rate (TWI)", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
print(plot5)
Trade_balance <- read_rba("I1")
Trade_balance$Date <- as.Date(Trade_balance$date, format = "%Y-%m-%d")
Trade_balance2 <- Trade_balance   %>%
filter(series_id == "HTBGSCPGDP") %>%
rename(Trade_balance = value) %>%
select(Date,Trade_balance)
df <- merge(df,Trade_balance2,by = "Date")
plot6<- ggplot(data = df, aes(x = Date, y =Trade_balance)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Trade Balance", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
print(plot6)
CPI = read_rba("G1")
inflation <- CPI %>%
filter(series_id == "GCPIAGQP") %>%
rename(Date = date, Quarterly_inflation = value) %>%
select(Date, Quarterly_inflation)
df <- merge(df,inflation,by = "Date")
M3 <- read_rba("D3")
# Filter, rename, and select columns
M3 <- M3 %>%
filter(series_id == "DMAM3N") %>%
rename(Date = date, M3 = value) %>%
select(Date, M3)
# Create a zoo object
M3.zoo <- zoo(M3$M3, M3$Date)
# Function to convert the index to quarterly and set the last day of each quarter
to_quarter <- function(x) {
as.yearqtr(format(x, "%Y-%m-%d"), format = "%Y-%m")
}
# Aggregate the monthly data to quarterly
M3_quarterly <- aggregate(M3.zoo, to_quarter, mean)
# Function to convert the yearqtr object to the last day of each quarter
yearqtr_to_quarter_end <- function(x) {
as.Date(as.yearqtr(x) + 1/4 - 1, frac = 1)
}
# Convert the aggregated quarterly data back to a data frame
M3_quarterly_df <- data.frame(Date = yearqtr_to_quarter_end(index(M3_quarterly)), M3 = coredata(M3_quarterly))
df = merge(df,M3_quarterly_df, by= "Date")
# Set your FRED API key
readRenviron("secret.R")
api_key <-Sys.getenv("MY_FRED_API_KEY")
fredr_set_key(api_key)
# Download the Australian government spending data (quarterly data, seasonally adjusted)
gov_spending_australia <- fredr(series_id = "AUSGFCEQDSMEI",observation_start = as.Date("1970-01-01"))
#  Real General Government Final Consumption Expenditure for Australia
gov_spending_australia <- fredr(series_id = "NCGGRSAXDCAUQ",observation_start = as.Date("1970-01-01"))
gov_spending_australia$log_gov = log(gov_spending_australia$value)
gov_spending_australia <- gov_spending_australia %>%
mutate(percentage_change = (value - lag(value)) / lag(value) * 100) %>%
select(date,value,percentage_change,log_gov) %>%
rename(Date = date)
plot7<- ggplot(data = gov_spending_australia, aes(x = Date, y =log_gov)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot8<- ggplot(data = gov_spending_australia, aes(x = Date, y =percentage_change)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending percentage change", x = "Year", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
gov_plot <- plot_grid(plot7, plot8,  ncol = 1, align = "v")
print(gov_plot)
adf.test(gov_spending_australia$log_gov)
test1 = acf(gov_spending_australia$log_gov)
test2 = pacf(gov_spending_australia$log_gov)
## Preliminary test
# Assuming your dataset is called 'data'
data_without_date <- df[,-1] # Remove date column if it exists
# Perform the ADF test on each variable and extract the test statistic and p-value
adf_summary <- map_df(data_without_date, function(x) {
adf_test <- ur.df(x, type = "none", lags = 1)
adf_test_summary <- summary(adf_test)
tibble(
Test_statistic = adf_test_summary@teststat[1, 1],
Critical_value= adf_test_summary@cval[1, 1]
)
}, .id = "Variable")
# Add variable names to the summary table
adf_summary$Variable <- colnames(data_without_date)
# Display the ADF test summary table
adf_summary
# Define the number of rows and columns for the combined plot
nrow <- 3
ncol <- 3
# Set up the combined plot grid
par(mfrow = c(nrow, ncol))
# Run the ACF and PACF functions for each variable and display the plots
for (i in seq_along(data_without_date)) {
variable_name <- colnames(data_without_date)[i]
# ACF plot
acf(data_without_date[[i]], main = paste("ACF of", variable_name))
}
# Reset the graphical parameters to default
par(mfrow = c(nrow, ncol))
# PACF plot
for (i in seq_along(data_without_date)) {
variable_name <- colnames(data_without_date)[i]
# PACF plot
pacf(data_without_date[[i]], main = paste("PACF of", variable_name))
}
ts_plot(df)
