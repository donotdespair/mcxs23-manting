plot6<- ggplot(data = log_df, aes(x = Date)) +
geom_line(aes(y = exports-imports), color = "steelblue", size = 0.8) +
#geom_line(aes(y = imports), color = "firebrick", size = 0.8) +
labs(title = " Trade Balance (log)", x = "Period", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
print(plot6)
plot7<- ggplot(data = log_df, aes(x = Date, y =gov_spend)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending", x = "Period", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
plot8<- ggplot(data = growth_df, aes(x = Date, y =gov_spend_growth)) +
geom_line(color = "steelblue", size = 0.8) +
labs(title = " Government Spending percentage change", x = "Period", y = "Index") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "none")
gov_plot <- plot_grid(plot7, plot8,  ncol = 1, align = "v")
print(gov_plot)
# adf.test(gov_spending_australia$log_gov)
# test1 = acf(gov_spending_australia$log_gov)
# test2 = pacf(gov_spending_australia$log_gov)
library(tidyverse)
library(urca)
library(xts)
# Convert the 'xts' object to a 'data.frame'
df_data_frame <- as.data.frame(df)[, -which(colnames(df) == "Date")]
# Perform the ADF test on each variable and extract the test statistic and p-value
# this procedure below is nicely coded! But using 1 lag for all the variables is not good. Better too high a lag number than too small. Stationarity of the TWI is most likely only the effect of too few lags used.
adf_summary <- map_df(df_data_frame , function(x) {
adf_test <- ur.df(x, type = "none", lags = 1)
adf_test_summary <- summary(adf_test)
tibble(
Test_statistic = adf_test_summary@teststat[1, 1],
Critical_value= adf_test_summary@cval[1, 1]
)
}, .id = "Variable")
# Perform the test for the first differences to determine the integration order and report in one table please
# Add variable names to the summary table
adf_summary$Variable <- colnames(df_data_frame )
# Display the ADF test summary table
knitr::kable(adf_summary, digits = 3)
nrow <- 3
ncol <- 3
# Set up the combined plot grid
par(mfrow = c(3,3))
# Run the ACF and PACF functions for each variable and display the plots
for (i in seq_along(df_data_frame )) {
variable_name <- colnames(df_data_frame )[i]
# ACF plot
acf(df_data_frame [[i]], main = paste("ACF of", variable_name))
}
# Reset the graphical parameters to default
par(mfrow = c(nrow, ncol))
# PACF plot
for (i in seq_along(df_data_frame )) {
variable_name <- colnames(df_data_frame )[i]
# PACF plot
pacf(df_data_frame [[i]], main = paste("PACF of", variable_name))
}
## Function for drawing posterior distribution , based on lec 12
kappa.1 = 1
Posterior <- function(Y, X, p, N, S,kappa.1) {
# MLE
############################################################
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)
# round(A.hat,3)
# round(Sigma.hat,3)
# round(cov2cor(Sigma.hat),3)
# prior distribution
############################################################
kappa.1     = kappa.1
# kappa.2     = 100
kappa.2     = 100
kappa.3     = 1
A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
A.prior[2:(N+1),] = kappa.3*diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1
# normal-inverse Wishard posterior parameters
############################################################
V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior)
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)
# posterior draws
############################################################
Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
Sigma.posterior   = apply(Sigma.posterior,3,solve)
Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
B.posterior       = array(NA,c(N,N,S))
L                 = t(chol(V.bar))
B1.posterior = array(NA,c(N,(1+N*p),S))
for (s in 1:S){
cholSigma.s     = chol(Sigma.posterior[,,s])
B.posterior[,,s]= t(cholSigma.s)
A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%cholSigma.s
B1.posterior[,,s] =  B.posterior[,,s]%*%t(A.posterior[,,s])
}
return(list(A.posterior = A.posterior, B.posterior = B.posterior, Sigma.posterior = Sigma.posterior,B1.posterior = B1.posterior))
}
### Impose sign restrictions based on Algorithm 2
# SignRestrictions <- function(sign.restrictions,N,S,p,A.posterior,B.posterior,B1.posterior,Sigma.posterior){
SignRestrictions <- function(sign.restrictions,posterior){
# posterior -   a list - estimation outcome from function Posterior
A.posterior   = posterior$A.posterior
B.posterior = posterior$B.posterior
B1.posterior = posterior$B1.posterior
Sigma.posterior = posterior$Sigma.posterior
S = dim(A.posterior)[3]
N = dim(B.posterior)[1]
p = (dim(B1.posterior)[2]-1)/N
R1            = diag(sign.restrictions)
B0.draws      = array(NA,c(N,N,S))
B1.draws      = array(NA,c(N,(1+N*p),S))
A.draws       = array(NA,c((1+N*p),N,S))
B.draws       = array(NA,c(N,N,S))
pb = txtProgressBar(min = 0, max = S, initial = 0)
for (s in 1:S){
setTxtProgressBar(pb, s)
B0.tilde <-B.posterior[,,s]
B1.tilde <-  B1.posterior[,,s]
A <- A.posterior[,,s]
Sigma <- Sigma.posterior[,,s]
sign.restrictions.do.not.hold = TRUE
i=1
while (sign.restrictions.do.not.hold){
X           = matrix(rnorm(N*N),N,N)
QR          = qr(X, tol = 1e-10)
Q           = qr.Q(QR,complete=TRUE)
R           = qr.R(QR,complete=TRUE)
Q           = t(Q %*% diag(sign(diag(R))))
B0          = Q%*%B0.tilde
B0.inv      = solve(B0)
# check       = prod(R1 %*% B0.inv %*% diag(N)[,1] > 0) # Check reponse at time 0
check       = prod(R1 %*% B0.inv %*% diag(N)[,1] >= 0)
if (check==1){sign.restrictions.do.not.hold=FALSE}
i=i+1
}
B1            = Q%*%B1.tilde
A.draws[,,s]  = t(solve(B0)%*%B1)
B.draws[,,s] =  solve(B0)
B0.draws[,,s] = B0
B1.draws[,,s] = B1
}
return (list(B0.draws = B0.draws,
B1.draws = B1.draws,
A.draws  = A.draws, # For empirical part
B.draws  = B.draws, # For empirical part
i        = i))
}
# ```
#
#
# ```{r}
# SignRestrictions <- function(sign.restrictions,posterior){
#   # posterior -   a list - estimation outcome from function Posterior
#
#
#   A.posterior   = posterior$A.posterior
#   B.posterior = posterior$B.posterior
#   B1.posterior = posterior$B1.posterior
#   Sigma.posterior = posterior$Sigma.posterior
#
#   S = dim(A.posterior)[3]
#   N = dim(B.posterior)[1]
#   p = (dim(B1.posterior)[2]-1)/N
#
#
#   R1            = diag(sign.restrictions)
#   B0.draws      = array(NA,c(N,N,S))
#   B1.draws      = array(NA,c(N,(1+N*p),S))
#   pb = txtProgressBar(min = 0, max = S, initial = 0)
#
# for (s in 1:S){
#
#   setTxtProgressBar(pb, s)
#
#   B0.tilde <-B.posterior[,,s]
#   B1.tilde <-  B1.posterior[,,s]
#   A <- A.posterior[,,s]
#   Sigma <- Sigma.posterior[,,s]
#
#   sign.restrictions.do.not.hold = TRUE
#
#   i=1
#
#   while (sign.restrictions.do.not.hold){
#     X           = matrix(rnorm(N*N),N,N)
#     QR          = qr(X, tol = 1e-10)
#     Q           = qr.Q(QR,complete=TRUE)
#     R           = qr.R(QR,complete=TRUE)
#     Q           = t(Q %*% diag(sign(diag(R))))
#     B0          = Q%*%B0.tilde
#     B0.inv      = solve(B0)
#     # check       = prod(R1 %*% B0.inv %*% diag(N)[,1] > 0) # Check reponse at time 0
#     check       = prod(R1 %*% B0.inv %*% diag(N)[,1] >= 0)
#
#
#     if (check==1){sign.restrictions.do.not.hold=FALSE}
#     i=i+1
#   }
#   B1            = Q%*%B1.tilde
#   B0.draws[,,s] = B0
#   B1.draws[,,s] = B1
#
# }
#
#   return (list(B0.draws = B0.draws,
#                B1.draws = B1.draws,
#                i        = i))
# }
# Posterios for basic model
#####################################################
#
# p = 4 # time lagt0
# N = 8
# S = 100
#
# # Create Y and X
# y = ts(df[, !names(df) %in% c("Date","nomGDP")])
# Y = y[5:211,]
# X       = matrix(1,nrow(Y),1)
# for (i in 1:p){
#   X     = cbind(X,y[5:211-i,])
# }
# results <- Posterior(Y, X, p, N, S)
#
#
# # Sign.restriction########
# ############################################################
# set.seed(123456)
# sign.restrictions <- c(1,1,1,1,1,1,1,1)
#
#
# ################### Apply Sign Restriction ########################
#
# Basic.Restriction = SignRestrictions(sign.restrictions,results)
#
# B0.draws = Basic.Restriction$B0.draws
# B1.draws = Basic.Restriction$B1.draws
#
#
# ###############################################
#
#
kappa.1 = 1
Posterior_kappaA <- function(Y, X, p, N, S1,S2, kappa.1) {
# MLE
############################################################
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)
# round(A.hat,3)
# round(Sigma.hat,3)
# round(cov2cor(Sigma.hat),3)
kappaA           <- c()
# prior distribution
############################################################
# Initialize kappa_A
kappaA[1] = 1
kappas = 0.1
kappani = 1/2
kappa.1     = kappa.1
# kappa.2     = 100
kappa.2     = 100
kappa.3     = 1
A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
A.prior[2:(N+1),] = kappa.3*diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1
# normal-inverse Wishard posterior parameters
############################################################
V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = kappaA*(V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior))
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)
# posterior draws
############################################################
Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
Sigma.posterior   = apply(Sigma.posterior,3,solve)
Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
B.posterior       = array(NA,c(N,N,S))
L                 = t(chol(V.bar))
B1.posterior = array(NA,c(N,(1+N*p),S))
for (s in 1:(S1+S2)){
cholSigma.s     = chol(Sigma.posterior[,,s])
B.posterior[,,s]= t(cholSigma.s)
A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%cholSigma.s
B1.posterior[,,s] =  B.posterior[,,s]%*%t(A.posterior[,,s])
# draw kappa_A
lambda = 1/2 - p*N/2
chi = sum(diag(solve(Sigma.posterior[,,s]) %*% t(A.posterior[,,s] - A.prior) %*% solve(V.prior) %*% (A.posterior[,,s] - A.prior)))
psi = 2/kappas
kappaA[s] = GIGrvg::rgig(n=1,lambda,chi,psi)
}
return(list(A.posterior = A.posterior[,,(S1+1):(S1+S2)],
B.posterior = B.posterior[,,(S1+1):(S1+S2)],
Sigma.posterior = Sigma.posterior[,,(S1+1):(S1+S2)],
B1.posterior = B1.posterior[,,(S1+1):(S1+S2)],
kappaA = kappaA[(S1+1):(S1+S2)]))
}
# Posterior_kappaA <- function(Y, X, p, N, S, kappa.1) {
#   # MLE
#   ############################################################
#   A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
#   Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)
#   # round(A.hat,3)
#   # round(Sigma.hat,3)
#   # round(cov2cor(Sigma.hat),3)
#
#
#   kappaA           <- c()
#
#   # prior distribution
#   ############################################################
#   # Initialize kappa_A
#   kappaA[1] = 1
#   kappas = 0.1
#   kappani = 1/2
#
#   kappa.1     = kappa.1
#   # kappa.2     = 100
#   kappa.2     = 100
#   kappa.3     = 1
#   A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
#   A.prior[2:(N+1),] = kappa.3*diag(N)
#   V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
#   S.prior     = diag(diag(Sigma.hat))
#   nu.prior    = N+1
#
#   # normal-inverse Wishard posterior parameters
#   ############################################################
#   V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
#   V.bar       = solve(V.bar.inv)
#   A.bar       = kappaA*(V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior))
#   nu.bar      = nrow(Y) + nu.prior
#   S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
#   S.bar.inv   = solve(S.bar)
#
#   # posterior draws
#   ############################################################
#   Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
#   Sigma.posterior   = apply(Sigma.posterior,3,solve)
#   Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
#   A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
#   B.posterior       = array(NA,c(N,N,S))
#   L                 = t(chol(V.bar))
#   B1.posterior = array(NA,c(N,(1+N*p),S))
#
#   for (s in 1:S){
#     cholSigma.s     = chol(Sigma.posterior[,,s])
#     B.posterior[,,s]= t(cholSigma.s)
#     A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%cholSigma.s
#     B1.posterior[,,s] =  B.posterior[,,s]%*%t(A.posterior[,,s])
#     # draw kappa_A
#     lambda = 1/2 - p*N/2
#     chi = sum(diag(solve(Sigma.posterior[,,s]) %*% t(A.posterior[,,s] - A.prior) %*% solve(V.prior) %*% (A.posterior[,,s] - A.prior)))
#     psi = 2/kappas
#     kappaA[s] = GIGrvg::rgig(n=1,lambda,chi,psi)
#
#   }
#
#   return(list(A.posterior = A.posterior, B.posterior = B.posterior, Sigma.posterior = Sigma.posterior,B1.posterior = B1.posterior,kappaA = kappaA))
#
# }
NarrativeSignRestrictions <- function(sign.restrictions,posterior,narrative.restrictions,Y,X){
# posterior -   a list - estimation outcome from function Posterior
A.posterior   = posterior$A.posterior
B.posterior = posterior$B.posterior
B1.posterior = posterior$B1.posterior
Sigma.posterior = posterior$Sigma.posterior
YY = Y
XX = X
S = dim(A.posterior)[3]
N = dim(B.posterior)[1]
p = (dim(B1.posterior)[2]-1)/N
R1            = diag(sign.restrictions)
B0.draws      = array(NA,c(N,N,S))
B1.draws      = array(NA,c(N,(1+N*p),S))
A.draws       = array(NA,c((1+N*p),N,S))
B.draws       = array(NA,c(N,N,S))
pb = txtProgressBar(min = 0, max = S, initial = 0)
for (s in 1:S){
setTxtProgressBar(pb, s)
B0.tilde <-B.posterior[,,s]
B1.tilde <-  B1.posterior[,,s]
A <- A.posterior[,,s]
Sigma <- Sigma.posterior[,,s]
sign.restrictions.do.not.hold = TRUE
narrative.restriction.do.not.hold = TRUE
i=1
while (sign.restrictions.do.not.hold){
X           = matrix(rnorm(N*N),N,N)
QR          = qr(X, tol = 1e-10)
Q           = qr.Q(QR,complete=TRUE)
R           = qr.R(QR,complete=TRUE)
Q           = t(Q %*% diag(sign(diag(R))))
B0          = Q%*%B0.tilde
B0.inv      = solve(B0)
B1            = Q%*%B1.tilde
u = YY %*% t(B0) - XX %*% t(B1)
u= u[,1]
check       = prod(R1 %*% B0.inv %*% diag(N)[,1] >= 0  ) # Check reponse at time 0
check_narrative = prod(sign(u[narrative.restrictions]) > 0)
if (check == 1 && check_narrative == 1) {
sign.restrictions.do.not.hold = FALSE
}
i = i + 1
B0.draws[, , s] = B0
B1.draws[, , s] = B1
A.draws[,,s]  = t(solve(B0)%*%B1)
B.draws[,,s] =  solve(B0)
}
close(pb)
}
return (list(B0.draws = B0.draws,
B1.draws = B1.draws,
A.draws  = A.draws,
B.draws  = B.draws,
i        = i))
}
### Proof that your model can replicate the true parameters of the data-generating process.
# Set parameters
n_obs = 1000
p <- 1
N <- 2
S <- 50000
# 1. Generate artificial data
set.seed(2023) # for reproducibility
cov_matrix <- diag(N)
mean_vector <- rep(0, N)
# Simulate bi-variate Gaussian random walk
RW1 <- arima.sim(model= list(order = c(0, 1, 0)), n=1000, mean=0, sd=1)
RW2 <- arima.sim(model= list(order = c(0, 1, 0)), n=1000, mean=0, sd=1)
y = cbind(RW1,RW2)
y <- ts(y)
# 2. Estimate the model
# Create Y and X
Y <- y[(p + 1):n_obs, ]
X <- matrix(1, nrow(Y), 1)
for (i in 1:p) {
X <- cbind(X, y[(p + 1 - i):(n_obs - i), ])
}
plot(y)
posterior <- Posterior(Y, X, p, N, S,kappa.1)
################### Apply Sign Restriction ########################
sign.restrictions = c(1,1)
Test.Restriction = SignRestrictions(sign.restrictions,posterior)
B0.draws = Test.Restriction$B0.draws
B1.draws = Test.Restriction$B1.draws
###############################################
A.check <- array(NA,c(N+1,N,S))
S.check <- array(NA,c(N,N,S))
for (s in 1:S){
# convert Bo into Sigma
S.check[,,s] <- B0.draws[,,s] %*% t(B0.draws[,,s])
A.check[,,s] <- t(B1.draws[,,s]) %*% B0.draws[,,s]
}
Acheck=round(apply(A.check,1:2,mean),4)
Scheck =round(apply(S.check,1:2,mean),4)
Acheck
Scheck
S1=5000
S2 = 45000
posterior_k <- Posterior_kappaA(Y, X, p, N, S1,S2 ,kappa.1)
Kappa_A = posterior_k$kappaA
hist(Kappa_A,
main=expression(paste("Distribution of ",kappa_A, " draws")),
freq=FALSE,
xlab = expression(kappa),
breaks = 1000,
xlim = c(0,0.01),
col = "turquoise4",
lty = "blank")
################### Apply Sign Restriction ########################
sign.restrictions = c(1,1)
Test.Restriction = SignRestrictions(sign.restrictions,posterior_k)
B0kappa.draws = Test.Restriction$B0.draws
B1kappa.draws = Test.Restriction$B1.draws
###############################################
Akappa.check <- array(NA,c(N+1,N,S2))
Skappa.check <- array(NA,c(N,N,S2))
for (s in 1:S2){
# convert Bo into Sigma
Skappa.check[,,s] <- B0kappa.draws[,,s] %*% t(B0kappa.draws[,,s])
Akappa.check[,,s] <- t(B1kappa.draws[,,s]) %*% B0kappa.draws[,,s]
}
Akappacheck=round(apply(A.check,1:2,mean),4)
Skappacheck =round(apply(S.check,1:2,mean),4)
Akappacheck
Skappacheck
######## Narrative sign
narrative.restrictions = c(65:67)
Narrative.Restriction = NarrativeSignRestrictions(sign.restrictions,posterior,narrative.restrictions,Y,X)
